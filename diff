<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Art's TAM 521 Quiz</title>
  <style>
    body { background: #f0f2f5; color: #333; font-family: 'Segoe UI', sans-serif; margin: 0; padding: 20px; display: flex; justify-content: center; align-items: center; min-height: 100vh; }
    .container { background: #fff; padding: 30px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); max-width: 800px; width: 100%; box-sizing: border-box; }
    h1, h2 { color: #005f73; text-align: center; margin: 10px 0; }
    .hidden { display: none; }
    label { display: block; margin: 15px 0 5px; font-weight: 500; }
    select, input[type="number"] { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 5px; }
    button { background: #0077b6; color: #fff; border: none; padding: 12px 25px; border-radius: 6px; cursor: pointer; font-size: 1em; transition: background 0.2s; margin-top: 20px; }
    button:disabled { opacity: 0.6; cursor: not-allowed; }
    button:hover:not(:disabled) { background: #023e8a; }
    #timer { text-align: center; font-size: 1.2em; color: #d62828; margin-bottom: 10px; }
    #progress { text-align: center; margin-bottom: 15px; }
    .question { font-weight: bold; margin-bottom: 15px; }
    .option { margin-bottom: 8px; }
    .option label { display: block; padding: 10px; background: #e9ecef; border-radius: 6px; border: 1px solid #ced4da; cursor: pointer; transition: background 0.2s; }
    .option label:hover { background: #dee2e6; }
    .option input { margin-right: 8px; }
    #results div { background: #f8f9fa; padding: 12px; border-left: 4px solid #0077b6; border-radius: 6px; margin-bottom: 8px; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Art's Quiz</h1>
    <h2>TAM 521: Financial Value Creation</h2>
    <div id="setup">
      <label for="mode">Mode:</label>
      <select id="mode">
        <option value="exam">Exam Mode</option>
        <option value="review">Review Mode</option>
      </select>

      <label for="time">Time (minutes):</label>
      <input type="number" id="time" value="60" min="1">

      <label for="qcount">Number of Questions:</label>
      <input type="number" id="qcount" value="10" min="1" max="50">

      <button id="start">Start Quiz</button>
    </div>

    <div id="quiz" class="hidden">
      <div id="timer"></div>
      <div id="progress"></div>
      <div id="question"></div>
      <button id="next" disabled>Next</button>
    </div>

    <div id="results" class="hidden">
      <h2>Quiz Complete!</h2>
      <p id="score"></p>
      <div id="review"></div>
      <button id="restart">Restart Quiz</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const allQuestions = [
        // Module 1: Working Capital & Inventory
        { q: "What does EOQ stand for?", options: ["End of Quarter","Economic Order Quantity","Estimated Operating Quotient","Enterprise Output Quality"], answer: 1, explanation: "EOQ = Economic Order Quantity." },
        { q: "Which formula is correct for EOQ?", options: ["(D*S)/H","√(2DS/H)","(H*D)/S","D/H"], answer: 1, explanation: "EOQ = sqrt(2 * Demand * OrderCost / HoldingCost)." },
        { q: "What is the Cash Conversion Cycle formula?", options: ["DSO + DPO + DIO","DSO + DIO - DPO","DPO + DIO - DSO","DSO - DPO + DIO"], answer: 1, explanation: "CCC = Days Sales Outstanding + Days Inventory Outstanding - Days Payables Outstanding." },
        { q: "The 5 Cs of Credit include:", options: ["Character, Capacity, Capital, Collateral, Conditions","Credit, Collateral, Capital, Capacity, Confidence","Cash, Credit, Conditions, Capacity, Capital","Character, Conditions, Credit, Cash, Collateral"], answer: 0, explanation: "5 Cs are Character, Capacity, Capital, Collateral, Conditions." },
        { q: "A firm can improve liquidity by:", options: ["Increasing inventory days","Reducing DSO","Extending AR collection","Holding more stock"], answer: 1, explanation: "Reducing days sales outstanding improves liquidity." },
        { q: "Cost of forgoing 2/10 net 30 is approx:", options: ["5%","15%","21%","35%"], answer: 2, explanation: "The effective annual cost is around 20.99%." },
        { q: "What is a conservative financing strategy?", options: ["More short-term debt","More long-term financing","No financing","Inventory reduction only"], answer: 1, explanation: "Conservative uses long-term funds for working capital." },
        { q: "Which ratio measures short-term liquidity?", options: ["ROE","Current Ratio","Debt-to-Equity","Profit Margin"], answer: 1, explanation: "Current Ratio = Current Assets / Current Liabilities." },
        { q: "Peng Plasma improved profitability by:", options: ["Increasing DSO","Reducing inventory days and AR","Issuing high equity early","Cutting R&D"], answer: 1, explanation: "Reducing AR and inventory freed cash for R&D." },
        { q: "EOQ balances:", options: ["Holding and ordering costs","Debt and equity costs","Cash and receivables","Profit and sales"], answer: 0, explanation: "EOQ finds minimum total cost between holding and ordering." },

        // Module 2: Time Value & Valuation
        { q: "What is the formula for PV of a perpetuity?", options: ["C*r","C/(r-g)","C/r","C*(1+r)^n"], answer: 2, explanation: "PV = C / r for a level perpetuity." },
        { q: "IRR is:", options: ["Rate that maximizes NPV","Rate that sets NPV=0","Highest WACC","Coupon rate"], answer: 1, explanation: "IRR is the discount rate that makes NPV zero." },
        { q: "If interest rates rise, bond prices:", options: ["Rise","Fall","Stay same","Are unaffected"], answer: 1, explanation: "Bond prices move inversely to rates." },
        { q: "Profitability Index (PI) is:", options: ["NPV/Cost","Cost/NPV","NPV*IRR","IRR/NPV"], answer: 0, explanation: "PI = Present Value of benefits / Cost." },
        { q: "Terminal value (TV) formula is:", options: ["CF*(1+g)/(r-g)","CF/r","CF*g","CF*(1+r)^n"], answer: 0, explanation: "TV = CF_{n+1} / (r - g)." },
        { q: "Why start retirement savings early?", options: ["Avoid fees","Leverage compounding","Higher taxes","Less liquidity"], answer: 1, explanation: "Early savings grow more due to compound interest." },
        { q: "Bond YTM compared to coupon rate when price>par:", options: ["YTM>coupon","YTM<coupon","YTM=0","No relation"], answer: 1, explanation: "Premium bonds have YTM less than coupon." },
        { q: "Which valuation method fits private firms best?", options: ["DCF","Market cap","P/E ratio","ROI"], answer: 0, explanation: "DCF is preferred for private firm valuation." },
        { q: "Saito Solar used:", options: ["DCF with terminal value","Only multiples","No forecasting","LIFO inventory"], answer: 0, explanation: "Case used multi-stage DCF plus terminal value." },
        { q: "NPV is preferred because:", options: ["Ignores CFs","Includes all CFs & TVM","Excludes discount rate","Simple guesswork"], answer: 1, explanation: "NPV considers all cash flows and time value." },

        // Module 3: FX & Derivatives
        { q: "Transaction exposure is:", options: ["FX impact on contracts","FX on accounting translation","FX on economic value","No FX impact"], answer: 0, explanation: "Transaction exposure is linked to contractual cash flows." },
        { q: "A forward contract:", options: ["Obligation to trade FX at future date","Right not obligation","Stock option","Swap interest only"], answer: 0, explanation: "Forward locks FX rate for future transaction." },
        { q: "FX options provide:", options: ["Obligation to buy","Right but not obligation","Interest protection","Stock hedging"], answer: 1, explanation: "Options give the right but not obligation." },
        { q: "Interest Rate Parity (IRP) states:", options: ["Spot=Forward","Forward reflects interest differential","Rates always equal","FX static"], answer: 1, explanation: "Forward FX includes interest rate differences." },
        { q: "Which exposure affects financial statements?", options: ["Transaction","Translation","Economic","Policy"], answer: 1, explanation: "Translation exposure affects accounting statements." },
        { q: "Porsche’s operational hedge includes:", options: ["Currency futures","US production","Options only","None"], answer: 1, explanation: "Shifting production reduces long-term FX risk." },
        { q: "A company hedges 3-month payable in EUR best with:", options: ["Forward contract","Equity swap","Bond investment","No hedge"], answer: 0, explanation: "Forward is cost-effective for fixed payables." },
        { q: "FX arbitrage arises when:", options: ["IRP holds","Forward deviates from IRP","Spot=Forward","No trading"], answer: 1, explanation: "If forward != IRP implied forward, arbitrage exists." },
        { q: "Eternal Beauty’s FX option cost included:", options: ["Strike cost only","Premium plus exercise","Forward rate","Spot only"], answer: 1, explanation: "Total = premium + exercise price * amount." },
        { q: "Cross-border valuation requires:", options: ["Free cash flows in foreign currency","Discounting at foreign rate","Convert at spot","All of above"], answer: 3, explanation: "All steps are needed." }
      ];

      let selected = [], current = 0, score = 0, mode = 'exam', timer, timeLeft;
      const setup = document.getElementById('setup'), quiz = document.getElementById('quiz'), results = document.getElementById('results');
      const start = document.getElementById('start'), next = document.getElementById('next'), restart = document.getElementById('restart');
      const timerEl = document.getElementById('timer'), progress = document.getElementById('progress'), questionEl = document.getElementById('question');
      const scoreEl = document.getElementById('score'), reviewEl = document.getElementById('review');

      function shuffle(a) { for (let i = a.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [a[i], a[j]] = [a[j], a[i]]; } }

      start.addEventListener('click', () => {
        mode = document.getElementById('mode').value;
        const count = parseInt(document.getElementById('qcount').value, 10);
        const n = Math.min(count, allQuestions.length);
        timeLeft = parseInt(document.getElementById('time').value, 10) * 60;
        selected = allQuestions.slice(); shuffle(selected); selected = selected.slice(0, n);
        setup.classList.add('hidden'); quiz.classList.remove('hidden'); next.disabled = true; current = 0; score = 0;
        render(); startTimer();
      });

      next.addEventListener('click', () => {
        const choice = document.querySelector('input[name="opt"]:checked');
        if (!choice) return;
        if (+choice.value === selected[current].answer) score++;
        else if (mode === 'review') alert(`Incorrect. Correct Answer: ${selected[current].options[selected[current].answer]}\n\nExplanation: ${selected[current].explanation}`);
        current++; next.disabled = true; render();
      });

      restart.addEventListener('click', () => location.reload());

      function startTimer() { updateTimer(); timer = setInterval(() => { timeLeft--; if (timeLeft <= 0) return end(); updateTimer(); }, 1000); }
      function updateTimer() { const m = Math.floor(timeLeft / 60); const s = timeLeft % 60; timerEl.textContent = `Time Left: ${m}:${s < 10 ? '0' + s : s}`; }

      function end() {
        clearInterval(timer);
        quiz.classList.add('hidden');
        results.classList.remove('hidden');
        const accuracy = selected.length > 0 ? (score / selected.length) * 100 : 0;
        scoreEl.textContent = `Your score: ${score} out of ${selected.length} (${accuracy.toFixed(2)}%)`;

        let reviewHTML = selected.map((q, i) => `
          <div>
            <p><strong>Question ${i + 1}:</strong> ${q.q}</p>
            <p><strong>Correct Answer:</strong> ${q.options[q.answer]}</p>
            <p><em>${q.explanation}</em></p>
          </div>
        `).join('');
        reviewEl.innerHTML = reviewHTML;
      }

      function render() {
        if (current >= selected.length) return end();
        progress.textContent = `Question ${current + 1} of ${selected.length}`;
        const q = selected[current];
        let html = `<div class="question">${q.q}</div>`;
        q.options.forEach((opt, i) => {
          html += `<div class="option"><label><input type="radio" name="opt" value="${i}"> ${opt}</label></div>`;
        });
        questionEl.innerHTML = html;
        document.querySelectorAll('input[name="opt"]').forEach(radio => {
          radio.addEventListener('change', () => { next.disabled = false; });
        });
      }
    });
  </script>
</body>
</html>
